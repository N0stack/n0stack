syntax = "proto3";

option go_package = "github.com/n0stack/n0stack/n0proto.go/provisioning/v0;pprovisioning";

package n0stack.provisioning;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";


message VirtualMachineNIC {
  string network_name = 1;
  map<string, string> annotations = 5;

  string hardware_address = 2;

  string ipv4_address = 3;
  string ipv6_address = 4;
}
message VirtualMachine {
  string name = 1;
  map<string, string> annotations = 3;

  uint32 request_cpu_milli_core = 10;
  uint32 limit_cpu_milli_core = 11;
  
  uint64 request_memory_bytes = 12;
  uint64 limit_memory_bytes = 13;
  
  repeated string block_storage_names = 14;
  repeated VirtualMachineNIC nics = 15;

  string uuid = 16;

  string login_username = 17;
  repeated string ssh_authorized_keys = 18;

  enum VirtualMachineState {
    // unknown state because failed to connect for scheduled node after RUNNING.
    UNKNOWN = 0;
    // working API
    PENDING = 1;

    // running vm
    RUNNING = 2;
    SHUTDOWN = 3;
    PAUSED = 4;
  }
  VirtualMachineState state = 50;

  string compute_node_name = 52;
  string compute_name = 53;

  repeated string network_interface_names = 54;
}


service VirtualMachineService {
  rpc CreateVirtualMachine(CreateVirtualMachineRequest) returns (VirtualMachine) {}
  rpc ListVirtualMachines(ListVirtualMachinesRequest) returns (ListVirtualMachinesResponse) {
    option (google.api.http) = {
      get: "/api/v0/virtual_machine"
    };
  }
  rpc GetVirtualMachine(GetVirtualMachineRequest) returns (VirtualMachine) {}
  rpc UpdateVirtualMachine(UpdateVirtualMachineRequest) returns (VirtualMachine) {}
  rpc DeleteVirtualMachine(DeleteVirtualMachineRequest) returns (google.protobuf.Empty) {}

  // VM actions
  // -> RUNNING
  rpc BootVirtualMachine(BootVirtualMachineRequest) returns (VirtualMachine) {}
  // RUNNING -> RUNNING
  rpc RebootVirtualMachine(RebootVirtualMachineRequest) returns (VirtualMachine) {}
  // RUNNING -> SHUTDOWN
  rpc ShutdownVirtualMachine(ShutdownVirtualMachineRequest) returns (VirtualMachine) {}
  // RUNNING -> PAUSED
  rpc SaveVirtualMachine(SaveVirtualMachineRequest) returns (VirtualMachine) {}

  rpc OpenConsole(OpenConsoleRequest) returns (OpenConsoleResponse) {}

  // rpc MigrateVirtualMachine(MigrateVirtualMachineRequest) returns (VirtualMachine) {}
}

message CreateVirtualMachineRequest {
  string name = 1;
  map<string, string> annotations = 3;

  uint32 request_cpu_milli_core = 10;
  uint32 limit_cpu_milli_core = 11;

  uint64 request_memory_bytes = 12;
  uint64 limit_memory_bytes = 13;

  repeated string block_storage_names = 14;
  repeated VirtualMachineNIC nics = 15;

  string uuid = 16;

  string login_username = 17;
  repeated string ssh_authorized_keys = 18;
}

message ListVirtualMachinesRequest {}
message ListVirtualMachinesResponse {
  repeated VirtualMachine virtual_machines = 1;
}

message GetVirtualMachineRequest {
  string name = 1;
}

message UpdateVirtualMachineRequest {
  string name = 1;
  map<string, string> annotations = 3;

  uint32 request_cpu_milli_core = 10;
  // uint32 limit_cpu_milli_core = 11;

  uint64 request_memory_bytes = 12;
  // uint64 limit_memory_bytes = 13;

  repeated string block_storage_names = 14;
  // repeated VirtualMachineNIC nics = 15;
}

message DeleteVirtualMachineRequest {
  string name = 1;
}

message BootVirtualMachineRequest {
  string name = 1;
}
message RebootVirtualMachineRequest {
  string name = 1;
  bool hard = 2;
}
message ShutdownVirtualMachineRequest {
  string name = 1;
  bool hard = 2;
}
message SaveVirtualMachineRequest {
  string name = 1;
}

message OpenConsoleRequest {
  string name = 1;
}
message OpenConsoleResponse{
  string console_url = 1;
}
