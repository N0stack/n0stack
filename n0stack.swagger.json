{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "n0stack",
    "contact": {
      "name": "n0stack",
      "url": "https://github.com/n0stack/n0stack"
    },
    "version": "version not set"
  },
  "paths": {
    "/api/v0/block_storage": {
      "get": {
        "tags": [
          "BlockStorageService"
        ],
        "operationId": "ListBlockStorages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0ListBlockStoragesResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "BlockStorageService"
        ],
        "operationId": "CreateBlockStorage",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0CreateBlockStorageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0BlockStorage"
            }
          }
        }
      }
    },
    "/api/v0/block_storage/{name}": {
      "get": {
        "tags": [
          "BlockStorageService"
        ],
        "operationId": "GetBlockStorage",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0BlockStorage"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "BlockStorageService"
        ],
        "operationId": "DeleteBlockStorage",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0BlockStorage"
            }
          }
        }
      }
    },
    "/api/v0/block_storage/{name}:download": {
      "get": {
        "tags": [
          "BlockStorageService"
        ],
        "operationId": "DownloadBlockStorage",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0DownloadBlockStorageResponse"
            }
          }
        }
      }
    },
    "/api/v0/block_storage/{name}:purge": {
      "post": {
        "tags": [
          "BlockStorageService"
        ],
        "operationId": "PurgeBlockStorage",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {}
          }
        }
      }
    },
    "/api/v0/block_storage/{name}:undelete": {
      "post": {
        "tags": [
          "BlockStorageService"
        ],
        "operationId": "UndeleteBlockStorage",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0BlockStorage"
            }
          }
        }
      }
    },
    "/api/v0/block_storage:copy": {
      "post": {
        "tags": [
          "BlockStorageService"
        ],
        "operationId": "CopyBlockStorage",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0CopyBlockStorageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0BlockStorage"
            }
          }
        }
      }
    },
    "/api/v0/block_storage:fetch": {
      "post": {
        "tags": [
          "BlockStorageService"
        ],
        "operationId": "FetchBlockStorage",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0FetchBlockStorageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0BlockStorage"
            }
          }
        }
      }
    },
    "/api/v0/virtual_machine": {
      "get": {
        "tags": [
          "VirtualMachineService"
        ],
        "operationId": "ListVirtualMachines",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0ListVirtualMachinesResponse"
            }
          }
        }
      }
    },
    "/api/v0/virtual_machine/{name}": {
      "get": {
        "tags": [
          "VirtualMachineService"
        ],
        "operationId": "GetVirtualMachine",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0VirtualMachine"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VirtualMachineService"
        ],
        "operationId": "DeleteVirtualMachine",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {}
          }
        }
      }
    },
    "/api/v0/virtual_machine/{name}:boot": {
      "post": {
        "tags": [
          "VirtualMachineService"
        ],
        "summary": "VM actions\n-\u003e RUNNING",
        "operationId": "BootVirtualMachine",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0VirtualMachine"
            }
          }
        }
      }
    },
    "/api/v0/virtual_machine/{name}:open_console": {
      "get": {
        "tags": [
          "VirtualMachineService"
        ],
        "operationId": "OpenConsole",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0OpenConsoleResponse"
            }
          }
        }
      }
    },
    "/api/v0/virtual_machine/{name}:reboot": {
      "post": {
        "tags": [
          "VirtualMachineService"
        ],
        "summary": "RUNNING -\u003e RUNNING",
        "operationId": "RebootVirtualMachine",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0VirtualMachine"
            }
          }
        }
      }
    },
    "/api/v0/virtual_machine/{name}:shutdown": {
      "post": {
        "tags": [
          "VirtualMachineService"
        ],
        "summary": "RUNNING -\u003e SHUTDOWN",
        "operationId": "ShutdownVirtualMachine",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0VirtualMachine"
            }
          }
        }
      }
    },
    "/api/v0/virtual_router": {
      "get": {
        "tags": [
          "VirtualRouterService"
        ],
        "operationId": "ListVirtualRouters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0ListVirtualRoutersResponse"
            }
          }
        }
      },
      "post": {
        "tags": [
          "VirtualRouterService"
        ],
        "operationId": "CreateVirtualRouter",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0CreateVirtualRouterRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0VirtualRouter"
            }
          }
        }
      }
    },
    "/api/v0/virtual_router/{name}": {
      "get": {
        "tags": [
          "VirtualRouterService"
        ],
        "operationId": "GetVirtualRouter",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0VirtualRouter"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "VirtualRouterService"
        ],
        "summary": "rpc UpdateVirtualRouter(UpdateVirtualRouterRequest) returns (VirtualRouter) {}",
        "operationId": "DeleteVirtualRouter",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {}
          }
        }
      }
    },
    "/api/v0/virtual_router/{virtual_router_name}/connected_network": {
      "post": {
        "tags": [
          "VirtualRouterService"
        ],
        "operationId": "ConnectNetwork",
        "parameters": [
          {
            "type": "string",
            "name": "virtual_router_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0ConnectNetworkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0VirtualRouter"
            }
          }
        }
      }
    },
    "/api/v0/virtual_router/{virtual_router_name}/connected_network/{network_name}": {
      "delete": {
        "tags": [
          "VirtualRouterService"
        ],
        "operationId": "DisconnectNetwork",
        "parameters": [
          {
            "type": "string",
            "name": "virtual_router_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "network_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0VirtualRouter"
            }
          }
        }
      }
    },
    "/api/v0/virtual_router/{virtual_router_name}/virtual_ip": {
      "put": {
        "tags": [
          "VirtualRouterService"
        ],
        "operationId": "ApplyVirtualIP",
        "parameters": [
          {
            "type": "string",
            "name": "virtual_router_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v0ApplyVirtualIPRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0VirtualRouter"
            }
          }
        }
      }
    },
    "/api/v0/virtual_router/{virtual_router_name}/virtual_ip/{virtual_ip_name}": {
      "delete": {
        "tags": [
          "VirtualRouterService"
        ],
        "operationId": "DeleteVirtualIP",
        "parameters": [
          {
            "type": "string",
            "name": "virtual_router_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "virtual_ip_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v0VirtualRouter"
            }
          }
        }
      }
    },
    "/api/v1alpha/project": {
      "get": {
        "tags": [
          "ProjectService"
        ],
        "operationId": "ListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaListProjectsResponse"
            }
          }
        }
      }
    },
    "/api/v1alpha/project/{name}": {
      "get": {
        "tags": [
          "ProjectService"
        ],
        "summary": "memberじゃない場合 notfound",
        "operationId": "GetProject",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaProject"
            }
          }
        }
      },
      "put": {
        "tags": [
          "ProjectService"
        ],
        "operationId": "UpdateProject",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaUpdateProjectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaProject"
            }
          }
        }
      },
      "post": {
        "tags": [
          "ProjectService"
        ],
        "operationId": "CreateProject",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaCreateProjectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaProject"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectService"
        ],
        "operationId": "DeleteProject",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {}
          }
        }
      }
    },
    "/api/v1alpha/project/{project_name}/membership/{user_name}": {
      "post": {
        "tags": [
          "ProjectService"
        ],
        "operationId": "AddProjectMembership",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaAddProjectMembershipRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaProject"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "ProjectService"
        ],
        "operationId": "DeleteProjectMembership",
        "parameters": [
          {
            "type": "string",
            "name": "project_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaProject"
            }
          }
        }
      }
    },
    "/api/v1alpha/user/{name}": {
      "get": {
        "tags": [
          "UserService"
        ],
        "operationId": "GetUser",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaUser"
            }
          }
        }
      },
      "put": {
        "tags": [
          "UserService"
        ],
        "operationId": "UpdateUser",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaUpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaUser"
            }
          }
        }
      },
      "post": {
        "tags": [
          "UserService"
        ],
        "operationId": "CreateUser",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaCreateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaUser"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserService"
        ],
        "operationId": "DeleteUser",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {}
          }
        }
      }
    },
    "/api/v1alpha/user/{user_name}/public_key/{public_key_name}": {
      "post": {
        "tags": [
          "UserService"
        ],
        "operationId": "AddPublicKey",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "public_key_name",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alphaAddPublicKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaUser"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "UserService"
        ],
        "operationId": "DeletePublicKey",
        "parameters": [
          {
            "type": "string",
            "name": "user_name",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "public_key_name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1alphaUser"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "BlockStorageBlockStorageState": {
      "type": "string",
      "title": "- PENDING: working API",
      "default": "BLOCK_STORAGE_UNSPECIFIED",
      "enum": [
        "BLOCK_STORAGE_UNSPECIFIED",
        "PENDING",
        "AVAILABLE",
        "IN_USE",
        "PROTECTED",
        "DELETED"
      ]
    },
    "RunSSHExecutionRequestSSHExecutionVirtualMachineFilter": {
      "type": "object",
      "properties": {
        "label": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "VirtualMachineVirtualMachineState": {
      "type": "string",
      "title": "- PENDING: working API\n - RUNNING: running vm",
      "default": "VIRTUAL_MACHINE_UNSPECIFIED",
      "enum": [
        "VIRTUAL_MACHINE_UNSPECIFIED",
        "PENDING",
        "RUNNING",
        "SHUTDOWN",
        "PAUSED"
      ]
    },
    "VirtualRouterVirtualIP": {
      "type": "object",
      "properties": {
        "network_interface_name": {
          "type": "string"
        },
        "network_name": {
          "type": "string"
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v0VirtualIPTarget"
          }
        }
      }
    },
    "VirtualRouterVirtualRouterConnectedNetwork": {
      "type": "object",
      "properties": {
        "network_interface_name": {
          "type": "string"
        },
        "network_name": {
          "type": "string"
        }
      }
    },
    "VirtualRouterVirtualRouterState": {
      "type": "string",
      "title": "- UNKNOWN: unknown state because failed to connect for scheduled node after RUNNING.\n - PENDING: working API",
      "default": "VIRTUAL_ROUTER_UNSPECIFIED",
      "enum": [
        "VIRTUAL_ROUTER_UNSPECIFIED",
        "UNKNOWN",
        "PENDING",
        "AVAILABLE"
      ]
    },
    "blockstorageCreateEmptyBlockStorageResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "blockstorageFetchBlockStorageResponse": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "configurationGenerateSecretResponse": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "configurationListSSHExecutionsResponse": {
      "type": "object",
      "properties": {
        "sshs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configurationSSHExecution"
          }
        }
      }
    },
    "configurationListSecretsResponse": {
      "type": "object",
      "properties": {
        "secrets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configurationSecret"
          }
        }
      }
    },
    "configurationSSHExecution": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "commands": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "results": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "configurationSSHExecutionResult": {
      "type": "object",
      "properties": {
        "finished_at": {
          "type": "string",
          "format": "date-time"
        },
        "key_secret_name": {
          "type": "string"
        },
        "output": {
          "type": "string"
        },
        "started_at": {
          "type": "string",
          "format": "date-time"
        },
        "virtual_machine_name": {
          "type": "string"
        }
      }
    },
    "configurationSecret": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "mailAlias": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "members": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "mailListAliasesResponse": {
      "type": "object",
      "properties": {
        "aliases": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mailAlias"
          }
        }
      }
    },
    "mailListMailsResponse": {
      "type": "object",
      "properties": {
        "threads": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mailThread"
          }
        }
      }
    },
    "mailMail": {
      "type": "object",
      "properties": {
        "blob": {
          "type": "string",
          "title": "messageを分けてしまってもいいかもしれない、その場合GetMailではblobを返す"
        },
        "cc": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "from": {
          "type": "string"
        },
        "message_id": {
          "type": "string"
        },
        "received_time": {
          "type": "string",
          "format": "date-time"
        },
        "subject": {
          "type": "string"
        },
        "to": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "mailThread": {
      "type": "object",
      "properties": {
        "mails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mailMail"
          }
        }
      }
    },
    "protobufAny": {
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
      "type": "object",
      "properties": {
        "type_url": {
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
          "type": "string"
        },
        "value": {
          "description": "Must be a valid serialized protocol buffer of the above specified type.",
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        },
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_status": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v0ApplyVirtualIPRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ipv4_address": {
          "type": "string"
        },
        "ipv6_address": {
          "type": "string"
        },
        "network_name": {
          "type": "string"
        },
        "targets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v0VirtualIPTarget"
          }
        },
        "virtual_ip_name": {
          "type": "string"
        },
        "virtual_router_name": {
          "type": "string"
        }
      }
    },
    "v0BlockStorage": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations can store metadata used by the system for control.\nIn particular, implementation-dependent fields that can not be set as protobuf fields are targeted.\nThe control specified by n0stack may delete metadata specified by the user.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "description": "Labels stores user-defined metadata.\nThe n0stack system must not rewrite this value.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "limit_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "description": "Name is a unique field.",
          "type": "string"
        },
        "node_name": {
          "type": "string"
        },
        "request_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "state": {
          "$ref": "#/definitions/BlockStorageBlockStorageState"
        },
        "storage_name": {
          "type": "string"
        }
      }
    },
    "v0ConnectNetworkRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "ipv4_address": {
          "type": "string"
        },
        "ipv6_address": {
          "type": "string"
        },
        "network_name": {
          "type": "string"
        },
        "virtual_router_name": {
          "type": "string"
        }
      }
    },
    "v0CopyBlockStorageRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "limit_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "request_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "source_block_storage": {
          "type": "string"
        }
      }
    },
    "v0CreateBlockStorageRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "limit_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "request_bytes": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "v0CreateVirtualMachineRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "block_storage_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "limit_cpu_milli_core": {
          "type": "integer",
          "format": "int64"
        },
        "limit_memory_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "login_username": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v0VirtualMachineNIC"
          }
        },
        "request_cpu_milli_core": {
          "type": "integer",
          "format": "int64"
        },
        "request_memory_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "ssh_authorized_keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "v0CreateVirtualRouterRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v0DownloadBlockStorageResponse": {
      "type": "object",
      "properties": {
        "download_url": {
          "type": "string"
        }
      }
    },
    "v0FetchBlockStorageRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "limit_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "name": {
          "type": "string"
        },
        "request_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "source_url": {
          "type": "string"
        }
      }
    },
    "v0ListBlockStoragesResponse": {
      "type": "object",
      "properties": {
        "block_storages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v0BlockStorage"
          }
        }
      }
    },
    "v0ListVirtualMachinesResponse": {
      "type": "object",
      "properties": {
        "virtual_machines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v0VirtualMachine"
          }
        }
      }
    },
    "v0ListVirtualRoutersResponse": {
      "type": "object",
      "properties": {
        "virtual_routers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v0VirtualRouter"
          }
        }
      }
    },
    "v0OpenConsoleResponse": {
      "type": "object",
      "properties": {
        "console_url": {
          "type": "string"
        }
      }
    },
    "v0VirtualIPTarget": {
      "type": "object",
      "properties": {
        "network_interface_name": {
          "type": "string"
        },
        "network_name": {
          "type": "string",
          "title": "target must be selected by connected network"
        }
      }
    },
    "v0VirtualMachine": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations can store metadata used by the system for control.\nIn particular, implementation-dependent fields that can not be set as protobuf fields are targeted.\nThe control specified by n0stack may delete metadata specified by the user.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "block_storage_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "compute_name": {
          "type": "string"
        },
        "compute_node_name": {
          "type": "string"
        },
        "labels": {
          "description": "Labels stores user-defined metadata.\nThe n0stack system must not rewrite this value.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "limit_cpu_milli_core": {
          "type": "integer",
          "format": "int64"
        },
        "limit_memory_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "login_username": {
          "type": "string"
        },
        "name": {
          "description": "Name is a unique field.",
          "type": "string"
        },
        "network_interface_names": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v0VirtualMachineNIC"
          }
        },
        "request_cpu_milli_core": {
          "type": "integer",
          "format": "int64"
        },
        "request_memory_bytes": {
          "type": "string",
          "format": "uint64"
        },
        "ssh_authorized_keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "state": {
          "$ref": "#/definitions/VirtualMachineVirtualMachineState"
        },
        "uuid": {
          "type": "string"
        }
      }
    },
    "v0VirtualMachineNIC": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hardware_address": {
          "type": "string"
        },
        "ipv4_address": {
          "type": "string"
        },
        "ipv6_address": {
          "type": "string"
        },
        "network_name": {
          "type": "string"
        }
      }
    },
    "v0VirtualRouter": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "connected_network": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualRouterVirtualRouterConnectedNetwork"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/VirtualRouterVirtualRouterState"
        },
        "virtual_ip": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/VirtualRouterVirtualIP"
          }
        }
      }
    },
    "v1alphaAddProjectMembershipRequest": {
      "type": "object",
      "properties": {
        "membership": {
          "$ref": "#/definitions/v1alphaProjectMembership"
        },
        "project_name": {
          "type": "string"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "v1alphaAddPublicKeyRequest": {
      "type": "object",
      "properties": {
        "public_key": {
          "type": "string"
        },
        "public_key_name": {
          "type": "string"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "v1alphaCreateProjectRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alphaCreateUserRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "display_name": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alphaGetAuthenticationTokenPublicKeyResponse": {
      "type": "object",
      "properties": {
        "public_key": {
          "type": "string"
        }
      }
    },
    "v1alphaListProjectsResponse": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alphaProject"
          }
        }
      }
    },
    "v1alphaProject": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations can store metadata used by the system for control.\nIn particular, implementation-dependent fields that can not be set as protobuf fields are targeted.\nThe control specified by n0stack may delete metadata specified by the user.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "display_name": {
          "type": "string"
        },
        "labels": {
          "description": "Labels stores user-defined metadata.\nThe n0stack system must not rewrite this value.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "membership": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1alphaProjectMembership"
          }
        },
        "name": {
          "description": "Name is a unique field.",
          "type": "string"
        }
      }
    },
    "v1alphaProjectMembership": {
      "description": " - OWNER: Owners have all of permissions.\n - MEMBER: Members have only assined permissions by Roles.",
      "type": "string",
      "default": "PROJECT_MEMBERSHIP_UNSPECIFIED",
      "enum": [
        "PROJECT_MEMBERSHIP_UNSPECIFIED",
        "OWNER",
        "MEMBER"
      ]
    },
    "v1alphaPublicKeyAuthenricateResponse": {
      "type": "object",
      "properties": {
        "authentication_token": {
          "$ref": "#/definitions/v1alphaPublicKeyAuthenricationResult"
        },
        "challenge": {
          "$ref": "#/definitions/v1alphaPublicKeyAuthenricationChallenge"
        }
      }
    },
    "v1alphaPublicKeyAuthenricationChallenge": {
      "type": "object",
      "properties": {
        "challenge": {
          "type": "string"
        }
      }
    },
    "v1alphaPublicKeyAuthenricationChallengeToken": {
      "type": "object",
      "properties": {
        "challenge_token": {
          "type": "string"
        }
      }
    },
    "v1alphaPublicKeyAuthenricationResult": {
      "type": "object",
      "properties": {
        "authentication_token": {
          "type": "string"
        }
      }
    },
    "v1alphaPublicKeyAuthenricationStart": {
      "type": "object",
      "properties": {
        "project": {
          "type": "string"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "v1alphaUpdateProjectRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alphaUpdateUserRequest": {
      "type": "object",
      "properties": {
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "display_name": {
          "type": "string"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alphaUser": {
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations can store metadata used by the system for control.\nIn particular, implementation-dependent fields that can not be set as protobuf fields are targeted.\nThe control specified by n0stack may delete metadata specified by the user.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "display_name": {
          "type": "string"
        },
        "labels": {
          "description": "Labels stores user-defined metadata.\nThe n0stack system must not rewrite this value.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name is a unique field.",
          "type": "string"
        },
        "public_keys": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "virtual_machineBlockDev": {
      "type": "object",
      "properties": {
        "boot_index": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "virtual_machineBootVirtualMachineResponse": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/virtual_machineVirtualMachineState"
        },
        "websocket_port": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "virtual_machineNetDev": {
      "type": "object",
      "properties": {
        "hardware_address": {
          "type": "string"
        },
        "ipv4_address_cidr": {
          "type": "string"
        },
        "ipv4_gateway": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nameservers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "network_name": {
          "type": "string"
        }
      }
    },
    "virtual_machineRebootVirtualMachineResponse": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/virtual_machineVirtualMachineState"
        }
      }
    },
    "virtual_machineShutdownVirtualMachineResponse": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/virtual_machineVirtualMachineState"
        }
      }
    },
    "virtual_machineVirtualMachineState": {
      "type": "string",
      "default": "FAILED",
      "enum": [
        "FAILED",
        "UNKNOWN",
        "SHUTDOWN",
        "RUNNING",
        "PAUSED"
      ]
    }
  }
}